<라이브러리 로드>
import numpy as np
import pandas as pd
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
numpy와 pandas: 데이터 처리 및 조작을 위해 사용.
statsmodels.api: 통계 모델링(선형 회귀 등)을 위해 사용.
sklearn.model_selection.train_test_split: 데이터를 학습/테스트 세트로 나누기 위해 사용.
sklearn.metrics.mean_squared_error: 모델 성능 평가를 위해 RMSE(평균 제곱근 오차)를 계산.

<데이터 로드 및 확인>
data = pd.read_csv("/content/02.야구선수연봉(투수).csv")
print(data.shape)
print(data.info())
print(data.head())
데이터셋: 02.야구선수연봉(투수).csv 파일을 로드. 이는 야구 투수의 연봉과 관련된 데이터를 포함함.
data.shape, data.info(), data.head(): 데이터의 크기, 구조, 처음 5행을 출력하여 데이터의 개요를 확인.

<학습/테스트 데이터셋 분리>
train_data, test_data = train_test_split(data, test_size=0.2, random_state=1)
데이터를 학습(train)과 테스트(test) 세트로 8:2 비율로 분리.
random_state=1로 설정하여 결과의 재현성을 보장.

<모델 1>
model1 = sm.OLS.from_formula("SALARY_2018 ~ ", "".join(train_data.columns.difference(['SALARY_2018'])), data=train_data).fit()
print(model1.summary())
sm.OLS.from_formula: statsmodels의 OLS(Ordinary Least Squares, 최소제곱법) 선형 회귀 모델을 사용.
종속 변수: SALARY_2018 (2018년 연봉).
독립 변수: SALARY_2018을 제외한 모든 열 (train_data.columns.difference(['SALARY_2018'])).
model1.summary(): 모델의 통계적 요약(계수, p-value, R-squared 등)을 출력.

<모델 2>
model2 = sm.OLS.from_formula("SALARY_2018 ~ VICTORY + DEFEAT + SAVE + WAR", data=train_data).fit()
print(model2.summary())
두 번째 선형 회귀 모델을 학습.
종속 변수: SALARY_2018.
독립 변수: VICTORY(승리), DEFEAT(패배), SAVE(세이브), WAR(Wins Above Replacement, 대체 선수 대비 승리 기여도)로 제한.
model2.summary(): 모델 요약 출력.

<예측>
pre_lm = model2.predict(test_data)
result = pd.DataFrame({'actual': test_data['SALARY_2018'], 'predict': pre_lm})
print(result)
model2를 사용해 테스트 데이터에 대해 예측 수행.
result: 실제 값(SALARY_2018)과 예측 값(pre_lm)을 비교한 데이터프레임 생성 및 출력.
출력 결과는 제공되지 않았지만, 실제 연봉과 예측 연봉의 차이를 확인할 수 있음.

<RMSE 계산>
rmse_value = sqrt(mean_squared_error(test_data['SALARY_2018'], pre_lm))
print("RMSE:", rmse_value)
RMSE(Root Mean Squared Error, 평균 제곱근 오차)를 계산하여 모델 성능 평가.
결과: RMSE: 33.

[결과분석]
1. 데이터셋
데이터는 야구 투수의 2018년 연봉(SALARY_2018)과 관련된 변수들(예: VICTORY, DEFEAT, SAVE, WAR 등)을 포함.
데이터 크기와 구조는 data.shape와 data.info()로 확인했으나, 구체적인 출력이 없으므로 정확한 행/열 수는 알 수 없음.

2. 모델 1
모든 독립 변수를 사용한 선형 회귀 모델.
model1.summary()를 통해 모델의 통계적 유의미성을 확인할 수 있음.
R-squared: 모델이 데이터를 얼마나 잘 설명하는지.
p-value: 각 변수의 유의미성(보통 p < 0.05일 때 유의미하다고 판단).
이 모델은 모든 변수를 포함하므로 과적합(overfitting) 가능성이 있음.

3. 모델 2
선택된 변수(VICTORY, DEFEAT, SAVE, WAR)만 사용한 선형 회귀 모델.
model2.summary()를 통해 모델의 성능을 확인.
모델 1에 비해 변수 수가 적으므로 더 간단한 모델이며, 과적합 위험이 줄어들 가능성이 있음.

4. 예측 및 성능 평가
model2를 사용해 테스트 데이터에 대해 예측 수행.
RMSE = 33:
RMSE는 예측값과 실제값의 차이를 평균적으로 나타내는 지표.
SALARY_2018의 단위가 연봉(예: 만 원 또는 백만 원)이라면, 예측값이 실제값과 평균적으로 33 단위만큼 차이 난다는 의미.
연봉의 스케일에 따라 이 값이 큰 오차인지 작은 오차인지 판단해야 함. 예를 들어, 연봉이 수백만 원 단위라면 RMSE 33은 비교적 작은 오차일 수 있음.
